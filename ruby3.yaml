- q: Which library can you use for benchmarking?
  a: Benchmark
- q: How do you execute arbitrary strings as code?
  a: eval
- q: Using eval can you define methods dynamically?
  a: yes
- q: What does Binding encapsulate in effect at a given point of execution?
  a: local variables
- q: true/false using eval with any user provided strings is a good idea.
  a: false
- q: What is the second argument to eval if you want local variables?
  a: binding
- q: What Ruby global variable helps protect from rogue file writes?
  a: $SAFE
- q: From 0 to what level can you set $SAFE to?
  a: 4
- q: Which cousin of eval mostly helps with seeing other object's instance variables?
  a: instance_eval
- q: What is a cousin of instance_eval that takes arguments?
  a: instance_exec
- q: What is module_eval an alias of?
  a: class_eval
- q: What is another way to call class_eval?
  a: module_eval
- q: Where does class_eval "put you inside of"?
  a: a class definition body
- q: What kind of class can you open with class_eval that is otherwise inaccessible?
  a: anonymous
- q: What does define_method return?
  a: proc
