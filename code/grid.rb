require 'pry'

matrix = [[".",".",".","1","4",".",".","2","."],
 [".",".","6",".",".",".",".",".","."],
 [".",".",".",".",".",".",".",".","."],
 [".",".","1",".",".",".",".",".","."],
 [".","6","7",".",".",".",".",".","9"],
 [".",".",".",".",".",".","8","1","."],
 [".","3",".",".",".",".",".",".","6"],
 [".",".",".",".",".","7",".",".","."],
 [".",".",".","5",".",".",".","7","."]]

 matrix2 = [[".",".",".",".","2",".",".","9","."],
 [".",".",".",".","6",".",".",".","."],
 ["7","1",".",".","7","5",".",".","."],
 [".","7",".",".",".",".",".",".","."],
 [".",".",".",".","8","3",".",".","."],
 [".",".","8",".",".","7",".","6","."],
 [".",".",".",".",".","2",".",".","."],
 [".","1",".","2",".",".",".",".","."],
 [".","2",".",".","3",".",".",".","."]]

 matrix3 = [[".",".",".",".",".",".","5",".","."],
 [".",".",".",".",".",".",".",".","."],
 [".",".",".",".",".",".",".",".","."],
 ["9","3",".",".","2",".","4",".","."],
 [".",".","7",".",".",".","3",".","."],
 [".",".",".",".",".",".",".",".","."],
 [".",".",".","3","4",".",".",".","."],
 [".",".",".",".",".","3",".",".","."],
 [".",".",".",".",".","5","2",".","."]]

 matrix4 = [[".",".",".",".",".",".",".",".","2"],
 [".",".",".",".",".",".","6",".","."],
 [".",".","1","4",".",".","8",".","."],
 [".",".",".",".",".",".",".",".","."],
 [".",".",".",".",".",".",".",".","."],
 [".",".",".",".","3",".",".",".","."],
 ["5",".","8","6",".",".",".",".","."],
 [".","9",".",".",".",".","4",".","."],
 [".",".",".",".","5",".",".",".","."]]

 matrix5 = [
 [".","4",".",".",".",".",".",".","."],
 [".",".","4",".",".",".",".",".","."],
 [".",".",".","1",".",".","7",".","."],
 [".",".",".",".",".",".",".",".","."],
 [".",".",".","3",".",".",".","6","."],
 [".",".",".",".",".","6",".","9","."],
 [".",".",".",".","1",".",".",".","."],
 [".",".",".",".",".",".","2",".","."],
 [".",".",".","8",".",".",".",".","."]
]

def sudoku2(grid)
  check_grids(grid) &&
    check_rows(grid) &&
    check_rows(grid.transpose.map &:reverse)
end

def check_rows(grid)
  grid.all? do |row|
    doubles?(row)
  end
end

def check_grids(grid)
  row1 = grid.map { |g| g.slice(0..2) }
  row2 = grid.map { |g| g.slice(3..5) }
  row3 = grid.map { |g| g.slice(6..8) }
  grid1 = row1.map { |g| g.slice(0..2).flatten }
  grid2 = row1.map { |g| g.slice(3..5).flatten }
  grid3 = row1.map { |g| g.slice(6..8).flatten }
  grid4 = row2.map { |g| g.slice(0..2).flatten }
  grid5 = row2.map { |g| g.slice(3..5).flatten }
  grid6 = row2.map { |g| g.slice(6..8).flatten }
  grid7 = row3.map { |g| g.slice(0..2).flatten }
  grid8 = row3.map { |g| g.slice(3..5).flatten }
  grid9 = row3.map { |g| g.slice(6..8).flatten }
  binding.pry
  rows = [row1, row2, row3]
  rows.all? do |row|
    row.all? do |g|
      p g
      # p "row: #{row}"
      # p "doubles: #{!doubles?(row)}"
      return false if !doubles?(g)
      true
    end
  end
end

def doubles?(a)
  last = nil
  a.sort.all? do |num|
    return false if num == last && num != "."
    last = num
  end
end

 # puts sudoku2(matrix)
 # puts sudoku2(matrix2)
 # puts sudoku2(matrix3)
 # puts sudoku2(matrix4)
 puts sudoku2(matrix5)
